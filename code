#include<iostream>
#include<string>
#include<queue>
#include<unordered_map>
using namespace std;

//A tree node
struct Node{
    char ch;
    int freq;
    Node *left,*right;
};

//Function to allocate a new tree node
Node *getNode(char ch,int freq,Node *left,Node *right){
    Node *node=new Node();
    node->ch=ch;
    node->freq=freq;
    node->left=left;
    node->right=right;
    return node;
}

struct comp{
    bool operator()(Node *l,Node *r){
        //this is basically set the priority stating that the highest priority item has lowest frequency
        return l->freq > r->freq;  //here it is stated that left priority is highest here as it is first to come out of queue
    }
};
void encode(Node* root,string str,unordered_map<char,string>&huffmanCode){
    if(root==NULL){
        return;
    }
    //found a leaf node
    if(!root->left && !root->right){
        huffmanCode[root->ch]=str;
    }
    encode(root->left,str+"0",huffmanCode);
    encode(root->right,str+'1',huffmanCode);
}

void decode(Node *root,int &topIndex,string str){
    if(root==nullptr){
        return;
    }
    //found a leaf node
    if(!root->left && !root->right){
        cout<<root->ch;
        return;
    }
    topIndex++;
    if(str[topIndex]=='0'){
        decode(root->left,topIndex,str);
    }else{
        decode(root->right,topIndex,str);
    }
}

void buildHuffmanTree(string text){
    //count frequency of appearance of each character and store it in map
    unordered_map<char,int> freq;
    for(char ch:text){
        freq[ch++];
    }
   
    //create a priority queue to store leaf node of huffman tree
    priority_queue<Node*,vector<Node*>,comp> pq;

    //create a leaf node for each character and add it to the prority queue, now all elements are added in the priority queue
    for(auto pair:freq){
        pq.push(getNode(pair.first,pair.second,nullptr,nullptr));
    }
    
    while(pq.size() != 1){
        //remove two node of highest priority 
        //(lowest frequency) from the queue
        Node *left=pq.top();pq.pop();
        Node *right=pq.top();pq.pop();
        //create a new internal node with these two node as children and with frequency equal to the sum
        //of the two nodes frequency.Add the new node to the priority queue
        int sum=left->freq+right->freq;
        pq.push(getNode('\0',sum,left,right));
    }
     
    //root stores pointer to root of Huffman Tree
    Node *root=pq.top();

    //Traverse the huffman tree and store the huffman codes
    //in a map. Also prints them

    unordered_map<char,string> huffmanCode;
    encode(root,"",huffmanCode);
    cout<<"Huffman codes are : "<<endl;
    for(auto pair:huffmanCode){
        cout<<pair.first<<" "<<pair.second<<endl;
    }
    cout<<"original string was "<<text<<endl;
    //print the encoded string
    string str="";
    for(char ch:text){
        str+=huffmanCode[ch];
    }
    cout<<endl;
    cout<<"encoded string is :"<<endl<<str<<endl;
    //traverse the Huffman tree afain and this time 
    //decode the encoded string
    int top_index=-1;
    cout<<"decoded string is ";
    while(top_index < (int)str.size()-2){
        decode(root,top_index,str);
    }
}

int main(){
    string text="Huffman coding is a data compression algorithm.";   
    buildHuffmanTree(text);
}
